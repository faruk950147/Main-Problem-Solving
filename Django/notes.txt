üîπ select_related
select_related ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü ‡¶Ø‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ForeignKey ‡¶¨‡¶æ OneToOneField relationship ‡¶•‡ßá‡¶ï‡ßá related object ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶Ü‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶® single JOIN query ‡¶¶‡¶ø‡ßü‡ßá‡•§

‡¶ï‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®?
‡¶Ø‡¶ñ‡¶® ForeignKey ‡¶¨‡¶æ OneToOneField relationship ‡¶Ü‡¶õ‡ßá, ‡¶è‡¶¨‡¶Ç related object ‡¶è‡¶∞ fields access ‡¶ï‡¶∞‡¶¨‡ßá‡¶®‡•§

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
python
Copy
Edit
# ‡¶Æ‡¶°‡ßá‡¶≤
class Author(models.Model):
    name = models.CharField(max_length=100)

class Book(models.Model):
    title = models.CharField(max_length=100)
    author = models.ForeignKey(Author, on_delete=models.CASCADE)

# ‡¶≠‡¶ø‡¶â‡¶§‡ßá
books = Book.objects.select_related('author').all()

for book in books:
    print(book.title, book.author.name)
‡¶è‡¶ñ‡¶æ‡¶®‡ßá select_related('author') ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡ßá‡¶á Book ‡¶ì Author ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá JOIN ‡¶ï‡¶∞‡ßá data ‡¶Ü‡¶®‡¶¨‡ßá‡•§

üîπ prefetch_related
prefetch_related ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü ‡¶Ø‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ManyToManyField ‡¶¨‡¶æ Reverse ForeignKey ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßá‡¶® ‡¶è‡¶¨‡¶Ç related objects ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ query ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶®, but efficiently (Django internally optimized ‡¶ï‡¶∞‡ßá)‡•§

‡¶ï‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®?
‡¶Ø‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ManyToMany ‡¶¨‡¶æ reverse ForeignKey (‡¶Ø‡ßá‡¶Æ‡¶®: author.book_set) access ‡¶ï‡¶∞‡¶¨‡ßá‡¶®‡•§

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
python
Copy
Edit
# ‡¶Æ‡¶°‡ßá‡¶≤
class Author(models.Model):
    name = models.CharField(max_length=100)

class Book(models.Model):
    title = models.CharField(max_length=100)
    author = models.ForeignKey(Author, on_delete=models.CASCADE)

# ‡¶≠‡¶ø‡¶â‡¶§‡ßá
authors = Author.objects.prefetch_related('book_set')

for author in authors:
    print(author.name)
    for book in author.book_set.all():
        print("  -", book.title)
‡¶è‡¶ñ‡¶æ‡¶®‡ßá prefetch_related('book_set') ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá Author query ‡¶ï‡¶∞‡¶¨‡ßá, ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶æ query ‡¶¶‡¶ø‡ßü‡ßá book ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ü‡¶®‡¶¨‡ßá, ‡¶è‡¶¨‡¶Ç Django automatically mapping ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶¨‡ßá‡•§

‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá ‡¶™‡¶æ‡¶∞‡ßç‡¶•‡¶ï‡ßç‡¶Ø
‡¶¨‡¶ø‡¶∑‡ßü	select_related	prefetch_related
‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï	ForeignKey, OneToOneField	ManyToMany, reverse ForeignKey
‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá	JOIN query ‡¶¶‡¶ø‡ßü‡ßá	‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡ß®‡¶ü‡¶æ query ‡¶¶‡¶ø‡ßü‡ßá
Performance	‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ (JOIN)	‡¶è‡¶ï‡¶ü‡ßÅ ‡¶ß‡ßÄ‡¶∞, ‡¶§‡¶¨‡ßá optimized
Query ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ	‡ßß‡¶ü‡¶ø query	‡ß®‡¶ü‡¶ø ‡¶¨‡¶æ ‡¶¨‡ßá‡¶∂‡¶ø query

‡¶â‡¶™‡¶∏‡¶Ç‡¶π‡¶æ‡¶∞
‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ model ‡¶è ForeignKey ‡¶•‡¶æ‡¶ï‡ßá ‡¶è‡¶¨‡¶Ç related object ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡ßá ‡¶Ü‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶® ‚Äî select_related ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§

‡¶Ø‡¶¶‡¶ø reverse relation ‡¶¨‡¶æ many-to-many ‡¶Ü‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶® ‚Äî prefetch_related ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§

‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶∞‡¶ø‡ßü‡ßá‡¶≤ ‡¶ï‡ßã‡¶° ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¶‡¶ø‡ßü‡ßá‡¶ì ‡¶¨‡ßÅ‡¶ù‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§ ‡¶ú‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßã‡¶® ‡¶ß‡¶∞‡¶£‡ßá‡¶∞ ‡¶∞‡¶ø‡¶≤‡ßá‡¶∂‡¶®‡¶∂‡¶ø‡¶™ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßá‡¶®‡•§








You said:
ei rokom ar function ase


ChatGPT said:
‡¶π‡ßç‡¶Ø‡¶æ‡¶Å ‡¶≠‡¶æ‡¶á, select_related ‡¶Ü‡¶∞ prefetch_related ‡¶õ‡¶æ‡ßú‡¶æ‡¶ì Django ORM-‡¶è ‡¶Ü‡¶∞‡¶ì ‡¶ï‡¶ø‡¶õ‡ßÅ powerful function ‡¶Ü‡¶õ‡ßá ‡¶Ø‡ßá‡¶ó‡ßÅ‡¶≤‡¶æ ‡¶°‡ßá‡¶ü‡¶æ efficiently query ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßá‡•§

‡¶®‡ßÄ‡¶ö‡ßá ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡¶ø‡¶õ‡ßÅ related queryset functions ‡¶¶‡¶ø‡¶≤‡¶æ‡¶Æ ‡¶Ø‡ßá‡¶ó‡ßÅ‡¶≤‡ßã select_related / prefetch_related ‡¶ü‡¶æ‡¶á‡¶™‡ßá‡¶∞ performance ‡¶¨‡¶æ query optimization ‡¶è ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßá:

1. only()
‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ï‡¶ø‡¶õ‡ßÅ field ‡¶õ‡¶æ‡ßú‡¶æ ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶á query ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§

python
Copy
Edit
books = Book.objects.only('title')  # ‡¶∂‡ßÅ‡¶ß‡ßÅ title field ‡¶Ü‡¶®‡¶¨‡ßá
‡¶è‡¶ü‡¶æ lazy load ‡¶ï‡¶∞‡ßá‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡¶ñ‡¶® book.author ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶§‡¶ñ‡¶® ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ query ‡¶π‡¶¨‡ßá‡•§

2. defer()
‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ï‡¶ø‡¶õ‡ßÅ field ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡ßü‡ßá ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶∏‡¶¨ ‡¶Ü‡¶®‡¶¨‡ßá‡•§

python
Copy
Edit
books = Book.objects.defer('description')  # description ‡¶õ‡¶æ‡ßú‡¶æ ‡¶∏‡¶¨ ‡¶Ü‡¶®‡¶¨‡ßá
‡¶è‡¶ü‡¶æ ‡¶§‡¶ñ‡¶® ‡¶ï‡¶æ‡¶ú ‡¶¶‡ßá‡ßü ‡¶Ø‡¶ñ‡¶® ‡¶¨‡ßú ‡¶ï‡ßã‡¶®‡ßã field ‡¶Ü‡¶õ‡ßá ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá ‡¶®‡¶æ‡•§

3. annotate()
Queryset-‡¶è extra calculated field ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§

python
Copy
Edit
from django.db.models import Count

authors = Author.objects.annotate(book_count=Count('book'))
for author in authors:
    print(author.name, author.book_count)
‡¶è‡¶ñ‡¶æ‡¶®‡ßá book_count ‡¶π‡¶≤‡ßã ‡¶è‡¶ï‡¶ü‡¶æ calculated field‡•§

4. values() ‡¶è‡¶¨‡¶Ç values_list()
Query result ‡¶ï‡ßá dictionary ‡¶¨‡¶æ tuple ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá ‡¶™‡ßá‡¶§‡ßá‡•§

python
Copy
Edit
Book.objects.values('title', 'author__name')
# Output: [{'title': 'A', 'author__name': 'X'}, ...]

Book.objects.values_list('title', flat=True)
# Output: ['Book 1', 'Book 2', ...]
Lightweight query ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶¨ ‡¶≠‡¶æ‡¶≤‡ßã‡•§

5. aggregate()
Queryset-‡¶è‡¶∞ ‡¶â‡¶™‡¶∞ summary/calculate ‡¶ï‡¶∞‡ßá result ‡¶¶‡ßá‡ßü‡•§

python
Copy
Edit
from django.db.models import Avg

Book.objects.aggregate(Avg('price'))
# Output: {'price__avg': 245.66}
summary-type query (‡¶Ø‡ßá‡¶Æ‡¶®: avg, sum, count) ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§

6. distinct()
‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü result ‡¶¨‡¶æ‡¶¶ ‡¶¶‡ßá‡ßü‡•§

python
Copy
Edit
Book.objects.values('author').distinct()
7. exists()
Query set-‡¶è ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶∏‡ßá‡¶ü‡¶æ True/False return ‡¶ï‡¶∞‡ßá‡•§

python
Copy
Edit
if Book.objects.filter(title='Django').exists():
    print("Book found")
8. select_for_update()
Database-level lock ‡¶¶‡ßá‡ßü (transaction ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá)‡•§

python
Copy
Edit
with transaction.atomic():
    book = Book.objects.select_for_update().get(id=1)
    book.stock -= 1
    book.save()
‡¶è‡¶ü‡¶æ concurrent request handle ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡ßü‡•§

‡¶â‡¶™‡¶∏‡¶Ç‡¶π‡¶æ‡¶∞ (‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá)
Function	‡¶ï‡¶æ‡¶ú
select_related()	JOIN ‡¶¶‡¶ø‡ßü‡ßá related object ‡¶Ü‡¶®‡¶¨‡ßá
prefetch_related()	‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ query ‡¶¶‡¶ø‡ßü‡ßá related object ‡¶Ü‡¶®‡¶¨‡ßá
only()	‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ï‡¶ø‡¶õ‡ßÅ field ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶Ü‡¶®‡¶¨‡ßá
defer()	‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ï‡¶ø‡¶õ‡ßÅ field ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡¶¨‡ßá
annotate()	calculated field ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶¨‡ßá
aggregate()	summary (sum, avg) data ‡¶Ü‡¶®‡¶¨‡ßá
values() / values_list()	dict/tuple ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá result
exists()	True/False ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá
distinct()	‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶¨‡¶æ‡¶¶
select_for_update()	database lock (transaction handle)

‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶π‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ function ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ + ‡¶ï‡ßã‡¶°‡¶∏‡¶π ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¶‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§

‡¶Ü‡¶™‡¶®‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶¨‡¶≤‡ßá‡¶®, ‡¶ï‡ßã‡¶®‡¶ü‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú‡ßá ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá ‡¶¨‡¶æ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø‡¶∏‡ßá‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá‡¶®?








You said:
django all method list daw


ChatGPT said:
Django-‡¶∞ ORM (Object-Relational Mapper) ‡¶è Model ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ query ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßá‡¶ï‡¶ó‡ßÅ‡¶≤‡ßã powerful method ‡¶Ü‡¶õ‡ßá‡•§ ‡¶®‡¶ø‡¶ö‡ßá Django QuerySet API-‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø method ‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶¶‡¶ø‡¶≤‡¶æ‡¶Æ (Bangla ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶∏‡¶π)‡•§

Django QuerySet Methods (‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶æ‡¶ô‡ßç‡¶ó ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ)
Basic Querying
Method	‡¶ï‡¶æ‡¶ú
all()	‡¶∏‡¶¨ object ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá
get()	‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü object ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá (‡¶®‡¶æ ‡¶™‡ßá‡¶≤‡ßá error)
filter()	‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∂‡¶∞‡ßç‡¶§ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡ßá
exclude()	‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∂‡¶∞‡ßç‡¶§ ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡ßü‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡ßá
order_by()	‡¶∏‡¶æ‡¶ú‡¶æ‡¶®‡ßã (ascending/descending)
reverse()	QuerySet ‡¶∞‡¶ø‡¶≠‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡ßá
distinct()	‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡ßü‡ßá ‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡ßá

Optimization & Performance
Method	‡¶ï‡¶æ‡¶ú
select_related()	ForeignKey/OneToOne fields join ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶®‡¶¨‡ßá
prefetch_related()	ManyToMany/reverse ForeignKey data ‡¶Ü‡¶®‡¶¨‡ßá
only()	‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü fields-‡¶á query ‡¶ï‡¶∞‡¶¨‡ßá
defer()	‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü fields ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡ßü‡ßá ‡¶¨‡¶æ‡¶ï‡¶ø query ‡¶ï‡¶∞‡¶¨‡ßá
select_for_update()	DB-level locking (transactions)

Field Limiting & Raw Data
Method	‡¶ï‡¶æ‡¶ú
values()	dict ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá query result
values_list()	tuple ‡¶¨‡¶æ list ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá result
dates()	date field ‡¶•‡ßá‡¶ï‡ßá ‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ‡ßá‡¶∞ list
datetimes()	datetime field ‡¶•‡ßá‡¶ï‡ßá ‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶ì ‡¶∏‡¶Æ‡ßü‡ßá‡¶∞ list

Aggregation & Annotation
Method	‡¶ï‡¶æ‡¶ú
aggregate()	summary ‡¶°‡ßá‡¶ü‡¶æ (sum, avg, min, max, count)
annotate()	calculated/custom field ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßá

Evaluation & Existence Checking
Method	‡¶ï‡¶æ‡¶ú
exists()	‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‚Äî True/False
count()	‡¶ï‡ßü‡¶ü‡¶ø row ‡¶Ü‡¶õ‡ßá
first()	‡¶™‡ßç‡¶∞‡¶•‡¶Æ object ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá
last()	‡¶∂‡ßá‡¶∑ object ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá
latest()	‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ (latest by date field) object
earliest()	‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶™‡ßÅ‡¶∞‡¶æ‡¶§‡¶® (by date field) object
none()	‡¶ñ‡¶æ‡¶≤‡¶ø QuerySet ‡¶¶‡ßá‡ßü
in_bulk()	id ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ dict ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá result ‡¶¶‡ßá‡ßü

Modifying QuerySets
Method	‡¶ï‡¶æ‡¶ú
update()	‡¶è‡¶ï ‡¶¨‡¶æ ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï object ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá update
delete()	‡¶è‡¶ï ‡¶¨‡¶æ ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï object delete
create()	‡¶®‡¶§‡ßÅ‡¶® object ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá
bulk_create()	‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï object ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶§‡ßà‡¶∞‡¶ø
bulk_update()	‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï object ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá update
get_or_create()	object ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá create ‡¶ï‡¶∞‡ßá
update_or_create()	‡¶•‡¶æ‡¶ï‡¶≤‡ßá update, ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá create

Custom SQL
Method	‡¶ï‡¶æ‡¶ú
raw()	Raw SQL query ‡¶ö‡¶æ‡¶≤‡¶æ‡ßü
extra() (deprecated)	Raw SQL ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá (‡¶è‡¶ñ‡¶® discouraged)

QuerySet Evaluation Triggers (‡¶Ø‡¶ñ‡¶® DB hit ‡¶ï‡¶∞‡ßá)
Django QuerySet lazy‚Äî‡¶Æ‡¶æ‡¶®‡ßá ‡¶Ø‡¶§‡¶ï‡ßç‡¶∑‡¶£ ‡¶®‡¶æ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ï‡¶∞‡ßá‡¶®, actual query ‡¶π‡ßü ‡¶®‡¶æ:

for loop

list(queryset)

len(queryset)

bool(queryset)

print(queryset)

any()/all()/sum()/min()/max()

values()/values_list()/aggregate()

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ (‡¶è‡¶ï ‡¶≤‡¶æ‡¶á‡¶®‡ßá)
python
Copy
Edit
Book.objects.filter(author__name='Omar').order_by('-price').select_related('author')
‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡ß©‡¶ü‡¶æ method chain ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá:

filter() ‚Üí ‡¶∂‡¶∞‡ßç‡¶§

order_by() ‚Üí descending price

select_related() ‚Üí author ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶Ü‡¶®‡¶¨‡ßá

Bonus: Method Chain ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü
python
Copy
Edit
Book.objects.filter(is_published=True).exclude(price=0).order_by('title')
рзз. Prototype Design Pattern (Design Level Concept)

ржПржЯрж╛ рж╣рж▓рзЛ Design Pattern ржПрж░ ржПржХржЯрж╛ ржзрж░ржиред
ржорж╛ржирзЗ: "ржПржХржЯрж╛ ржЕржмржЬрзЗржХрзНржЯ рждрзИрж░рж┐ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржЧрзЗрж░ ржХрзЛржирзЛ ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржХржкрж┐ (clone) ржХрж░рж╛"ред
ржмрж╛рж░ржмрж╛рж░ ржирждрзБржи object create ржирж╛ ржХрж░рзЗ ржЖржЧрзЗрж░ ржПржХржЯрж╛рж░ copy ржХрж░рзЗ ржХрж╛ржЬ ржЪрж╛рж▓рж╛ржирзЛ рж╣рзЯред
ржмрж┐рж╢рзЗрж╖ ржХрж░рзЗ ржпржЦржи ржирждрзБржи object рждрзИрж░рж┐ ржХрж░рж╛ ржЦрзБржм ржмрзЗрж╢рж┐ resource ржмрж╛ time consuming рж╣ржпрж╝ рждржЦржиред
Python Example: Prototype Design Pattern

import copy

class Prototype:
    def __init__(self):
        self.objects = {}

    def register_object(self, name, obj):
        self.objects[name] = obj

    def unregister_object(self, name):
        del self.objects[name]

    def clone(self, name, **attributes):
        obj = copy.deepcopy(self.objects.get(name))
        obj.__dict__.update(attributes)
        return obj

# Example Class
class Car:
    def __init__(self):
        self.make = "Ford"
        self.model = "Mustang"
        self.color = "Red"

    def __str__(self):
        return f'{self.make} {self.model} {self.color}'

# Using the Prototype
prototype = Prototype()
car = Car()
prototype.register_object('mustang', car)

car_clone = prototype.clone('mustang', color='Blue')

print(car)        # Output: Ford Mustang Red
print(car_clone)  # Output: Ford Mustang Blue

ржПржЦрж╛ржирзЗ:

    ржкрзНрж░ржержорзЗ ржЖржорж░рж╛ ржПржХржЯрж╛ original object (car) ржмрж╛ржирж┐ржпрж╝рзЗржЫрж┐ред

    рждрж╛рж░ржкрж░ рж╕рзЗржЯрж╛ register ржХрж░рзЗржЫрж┐ред

    ржкрж░рзЗ рж╕рзЗржЗ object ржПрж░ copy ржХрж░рзЗ ржПржХржЯрж╛ ржирждрзБржи object рждрзИрж░рж┐ ржХрж░рзЗржЫрж┐ред

    ржХржкрж┐ ржХрж░рж╛рж░ рж╕ржоржпрж╝ ржЪрж╛ржЗрж▓рзЗржЗ ржХрж┐ржЫрзБ attribute ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржкрж╛рж░рж┐ред

рзи. Python Function Prototype (Function Signature / Declaration style)

C/C++ ржПрж░ ржорждрзЛ Python-ржП "function prototype" ржЖрж▓рж╛ржжрж╛ ржХрж░рзЗ ржбрж┐ржХрзНрж▓рзЗржпрж╝рж╛рж░" ржХрж░рждрзЗ рж╣ржпрж╝ ржирж╛ред
рждржмрзЗ Python ржП ржпржЦржи рждрзБржорж┐ ржлрж╛ржВрж╢ржи рж▓рзЗржЦрзЛ, рждржЦржи function signature ржмрж╛ method signature ржХрзЗ ржЕржирзЗржХрзЗ function prototype ржмрж▓рзЗред

ржЙржжрж╛рж╣рж░ржг:

def add(a: int, b: int) -> int:
    return a + b

ржПржЦрж╛ржирзЗ ЁЯСЙ

    ржлрж╛ржВрж╢ржирзЗрж░ ржирж╛ржо: add

    ржЗржиржкрзБржЯ ржЯрж╛ржЗржк: int, int

    рж░рж┐ржЯрж╛рж░рзНржи ржЯрж╛ржЗржк: int
    ржПржЯрж╛ржХрзЗржУ ржЕржирзЗржХрзЗ ржмрж▓рзЗ Python Function Prototypeред

рж╕ржВржХрзНрж╖рзЗржкрзЗ:
Concept	Meaning
Python Design Pattern	ржкрзБрж░ржирзЛ object ржерзЗржХрзЗ copy ржХрж░рзЗ ржирждрзБржи object рждрзИрж░рж┐ ржХрж░рж╛
Function Prototype	ржлрж╛ржВрж╢ржирзЗрж░ signature ржмрж╛ ржбрзЗржлрж┐ржирж┐рж╢ржи